apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-proxy-manager
  namespace: nginx
spec:
  progressDeadlineSeconds: 600
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      workload.user.cattle.io/workloadselector: apps.deployment-nginx-nginx-proxy-manager
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        workload.user.cattle.io/workloadselector: apps.deployment-nginx-nginx-proxy-manager
    spec:
      affinity: {}
      containers:
      - env:
        - name: DB_MYSQL_HOST
          value: db
        - name: DB_MYSQL_PORT
          value: "3306"
        - name: DB_MYSQL_USER
          valueFrom:
            secretKeyRef:
              key: db.user
              name: nginx-proxy-manager
              optional: false
        - name: DB_MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: db.password
              name: nginx-proxy-manager
              optional: false
        - name: DB_MYSQL_NAME
          valueFrom:
            secretKeyRef:
              key: db.name
              name: nginx-proxy-manager
              optional: false
        image: jc21/nginx-proxy-manager:latest
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 80
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: nginx
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        - containerPort: 81
          name: admin
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 80
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/letsencrypt
          name: nginx-proxy-manager
          subPath: letsencrypt
        - mountPath: /data
          name: nginx-proxy-manager
          subPath: data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: nginx-proxy-manager
        persistentVolumeClaim:
          claimName: nginx-proxy-manager

